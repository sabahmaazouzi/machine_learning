{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pylab import *\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split(x,y):\n",
    "    n =240//4\n",
    "    trainx = np.zeros(240-n)\n",
    "    trainy = np.zeros(240-n)\n",
    "    testx = np.zeros(n)\n",
    "    testy = np.zeros(n)\n",
    "    \n",
    "    indtrain =0\n",
    "    \n",
    "    indtest =0\n",
    "    for a in range(240):\n",
    "        if (a % 4 !=0 ):\n",
    "            trainx[indtrain]=x[a]\n",
    "            trainy[indtrain]=y[a]\n",
    "            indtrain=indtrain+1\n",
    "\n",
    "        else : \n",
    "            testx[indtest]=x[a]\n",
    "            testy[indtest]=y[a]\n",
    "            indtest=indtest+1\n",
    "    \n",
    "    return trainx,trainy ,testx , testy\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv(\"data10.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.array(data['x'])\n",
    "y=np.array(data['y'])\n",
    "trainx,trainy,  testx,testy = split(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize(x):\n",
    "  X = np.zeros(len(x))\n",
    "  for i in range (len(x)):\n",
    "    X[i] = (x[i] - np.mean(trainy))/ sqrt((np.var(trainy)))\n",
    "  return X\n",
    "\n",
    "def normalize_x(x):\n",
    "  X = np.zeros(len(x))\n",
    "  for i in range (len(x)):\n",
    "    X[i] = (x[i] - np.mean(trainx))/ sqrt((np.var(x)))\n",
    "  return X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>240.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>-0.100000</td>\n",
       "      <td>-43.910874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>13.885244</td>\n",
       "      <td>77310.172183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-24.000000</td>\n",
       "      <td>-211525.076890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>-12.050000</td>\n",
       "      <td>-38210.462974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>-0.100000</td>\n",
       "      <td>-3204.081743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>11.850000</td>\n",
       "      <td>42815.168808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>23.800000</td>\n",
       "      <td>232194.622861</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                x              y\n",
       "count  240.000000     240.000000\n",
       "mean    -0.100000     -43.910874\n",
       "std     13.885244   77310.172183\n",
       "min    -24.000000 -211525.076890\n",
       "25%    -12.050000  -38210.462974\n",
       "50%     -0.100000   -3204.081743\n",
       "75%     11.850000   42815.168808\n",
       "max     23.800000  232194.622861"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(x, theta):\n",
    "  s=0.0\n",
    "  for i in range(0,len(theta)):\n",
    "    s=s+theta[i]*x**i\n",
    "  return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_predictions(x, theta):\n",
    "  prediction = np.zeros(len(x))\n",
    "  for i in range(0,len(x)):\n",
    "    prediction[i]=predict(x[i], theta)\n",
    "   \n",
    "  return prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradient_descent_pol(x,y,degre):\n",
    "    theta =np.zeros(degre+1)\n",
    "    pas= 0.01\n",
    "    predictions =np.zeros(degre+1)\n",
    "    d=np.zeros(degre+1)\n",
    "    predictions = calculate_predictions(x, theta);\n",
    "    diff = np.array(calculate_predictions(x, theta))-y\n",
    "    errors_x1 = diff\n",
    "    d[0]=-(2.0 / len(x))*np.sum(errors_x1)\n",
    "    for i in range(1,degre + 1):\n",
    "      errors_x2 = diff*puissance(x,i)\n",
    "      d[i]=-(2 / len(x))*np.sum(errors_x2)\n",
    "    nor=np.linalg.norm(d)\n",
    "    #k=f(x,theta,y)\n",
    "    i=0\n",
    "    while (nor>0.001):\n",
    "        theta = theta +pas*d\n",
    "        predictions = calculate_predictions(x, theta);\n",
    "        diff = predictions-y\n",
    "        errors_x1 = diff\n",
    "        d[0]=-(2.0 / len(x))*np.sum(errors_x1)\n",
    "        for i in range(1,degre + 1):\n",
    "          errors_x2 = diff*puissance(x,i)\n",
    "          d[i]=-(2 / len(x))*np.sum(errors_x2)\n",
    "        nor=np.linalg.norm(d)\n",
    "        i\n",
    "        #print(nor)\n",
    "        #k=f(x,theta,y)\n",
    "    return theta;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ls(x, theta , y):\n",
    "  l =len(x)\n",
    "  res = np.zeros(l)\n",
    "  predictions = calculate_predictions(x, theta);\n",
    "  diff = predictions-y\n",
    "  ls = puissance(diff,2)\n",
    "  res = (1.0/l) *np.sum(ls)\n",
    "  return res\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def puissance(x,degre):\n",
    "  l =len(x)\n",
    "  res = np.zeros(l)\n",
    "  for i  in range(0, l):\n",
    "    res[i]=x[i]**degre\n",
    "  return res\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "w1 = gradient_descent_pol(normalize_x(trainx),normalize(trainy),2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "w2 = gradient_descent_pol(normalize_x(trainx),normalize(trainy),3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "w3 = gradient_descent_pol(normalize_x(trainx),normalize(trainy),4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Erreur empirique pour k=2 :  0.30314709755384206\n",
      "Erreur empirique pour k=3 :  0.15611317812212033\n",
      "Erreur empirique pour k=4:  0.15770346284070244\n"
     ]
    }
   ],
   "source": [
    "l1=ls(normalize_x(testx),w1 ,normalize_x(testy))\n",
    "l2=ls(normalize_x(testx),w2 ,normalize_x(testy))\n",
    "l3=ls(normalize_x(testx),w3 ,normalize_x(testy))\n",
    "print(\"Erreur empirique pour k=2 : \", l1)\n",
    "print(\"Erreur empirique pour k=3 : \", l2)\n",
    "print(\"Erreur empirique pour k=4: \", l3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "l = np.linspace(-2, 2, 200)\n",
    "plt.scatter(normalize_x(trainx),normalize(trainy),color='wheat')\n",
    "plt.scatter(normalize_x(testx),normalize(testy),color='salmon')\n",
    "plt.plot(l,predict(l,w1),color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "l = np.linspace(-2, 2, 200)\n",
    "plt.scatter(normalize_x(trainx),normalize(trainy),color='wheat')\n",
    "plt.scatter(normalize_x(testx),normalize(testy),color='salmon')\n",
    "plt.plot(l,predict(l,w2),color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "l = np.linspace(-2, 2, 200)\n",
    "plt.scatter(normalize_x(trainx),normalize(trainy),color='wheat')\n",
    "plt.scatter(normalize_x(testx),normalize(testy),color='salmon')\n",
    "plt.plot(l,predict(l,w3),color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6004211984.5844555"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(trainy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def var(theta):\n",
    "    a = normalize(trainy)\n",
    "    h = a - calculate_predictions(normalize(trainx), theta)\n",
    "    v = h**2\n",
    "    return np.mean(v)/len(h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "var  k=2 :  0.005587955999086331\n",
      "var  k=3 :  0.005575667933871489\n",
      "var  k=4:  0.005567390670066829\n"
     ]
    }
   ],
   "source": [
    "l1= var(w1)\n",
    "l2=var(w2)\n",
    "l3=var(w3)\n",
    "print(\"var  k=2 : \", l1)\n",
    "print(\"var  k=3 : \", l2)\n",
    "print(\"var  k=4:  \", l3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
